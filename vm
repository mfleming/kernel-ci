#!/bin/sh
#
# Copyright (c) 2015 SUSE Linux GmbH
#
# This file is part of the kernel-ci project and licensed under the GNU GPLv2
#
set -o nounset

source ./lib.sh

QEMU="qemu-system-"
ARCH="x86_64"
KERNEL=""
INITRD=""
ROOTFS=""
ROOT="/dev/vda3"
TIMEOUT=""

# TODO Add networking

usage()
{
	prog=$(basename $0)
	echo "$prog [-a arch] [-d] [-r rootfs] [-R root] -k <kernel> -i <initrd>" >&2
	echo "  -a arch         Architecture for QEMU." >&2
	echo "  -d              Enable debug output." >&2
	echo "  -r rootfs       Rootfs image to use." >&2
	echo "  -R root         root= kernel cmdline option" >&2
	echo "  -k kernel       kernel image to use." >&2
	echo "  -i initrd       initrd image to use." >&2
}

while getopts "da:k:i:r:hR:t:" opt; do
	case ${opt} in
		a)
			ARCH=$OPTARG
			;;
		d)
			DEBUG="-d"
			;;
		k)
			KERNEL=$OPTARG
			;;
		i)
			INITRD=$OPTARG
			;;
		r)
			ROOTFS=$OPTARG
			;;
		R)
			ROOT=$OPTARG
			;;
		t)
			TIMEOUT=$OPTARG
			;;
		h)
			usage
			exit 1
			;;
	esac
done

if [ x"$KERNEL" == "x" ]; then
	pr_err "No kernel option given"
	usage
	exit 1
fi

if [ x"$ROOTFS" == "x" ]; then
	pr_err "No rootfs option given"
	usage
	exit 1
fi

if [ x"$INITRD" == "x" ]; then
	pr_err "No initrd option given"
	usage
	exit 1
fi

QUIET=quiet

if [ "$DEBUG" == "-d" ]; then
	QUIET=debug
fi



if [ "$ARCH" == "aarch64" ]; then
	QEMU_EXTRA="-machine virt -cpu host -bios /usr/share/qemu/qemu-uefi-aarch64.bin -enable-kvm"
	QEMU_DEVICE="-device virtio-blk-pci,scsi=off,addr=0x5,drive=drive-virtio-disk0,id=virtio-disk0,bootindex=1"
	CONSOLE="ttyAMA0"
else
	QEMU_EXTRA=""
	QEMU_DEVICE="-device virtio-blk-pci,scsi=off,bus=pci.0,addr=0x5,drive=drive-virtio-disk0,id=virtio-disk0,bootindex=1"
	CONSOLE="ttyS0"
fi

QEMU_CMD=(
	"$QEMU$ARCH"

	$QEMU_EXTRA

	# Disk
	$QEMU_DEVICE
	-drive file="${ROOTFS}",if=none,id=drive-virtio-disk0 -snapshot

	# Serial output
	-serial stdio -monitor none -nographic

	# CPU & Memory
	-smp 2 -m 1024

	# Kernel & initrd
	-append 'root='${ROOT}' ro console=${CONSOLE} "${QUIET}" rdinit=/bin/init'
	-kernel "$KERNEL"
	-initrd "$INITRD"
)
pr_debug "Linux kernel to load: $KERNEL"
pr_debug "Initramfs to load: $INITRD"

pr_debug "${QEMU_CMD[@]}"
timeout --foreground --kill-after=10 "$TIMEOUT" "${QEMU_CMD[@]}"
